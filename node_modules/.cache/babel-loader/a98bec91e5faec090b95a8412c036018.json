{"ast":null,"code":"var _jsxFileName = \"/home/kali/Development/Projects/terminal/src/components/Writeups/MCNO.js\";\nimport main from \"./img/NOmain.png\";\nimport create from \"./img/NOcreate.png\";\nimport check from \"./img/NOcheck.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MCNO = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Microcorruption: New Orleans\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), \"2021-02-28\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), \"This will be the first of a series of posts where I detail my answers to various\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://microcorruption.com/\",\n      target: \"__blank\",\n      children: \"microcorruption\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), \" \", \"ctf challenges. The objective of these challenges is to unlock a device by reverse-engineering its code and exploiting its vulnerabilities. With that out of the way, let's get hacking!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), \"The first thing I did was set up a break point at\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), \", since that's the entry point for our program.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: main,\n      alt: \"main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), \"This code might seem intimidating if you aren't familiar with assembly, but it's actually quite simple. First, it calls a\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"create_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), \" function, then it prints a string with the \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"puts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 16\n    }, this), \" function. Next, it gets a password from the user and checks if it's correct. Depending on the content of\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), \" after \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"check_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 40\n    }, this), \" is executed, the door will either unlock or remain locked.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), \"First of all, Let's take a closer look at\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"create_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), \", since it seems like a promising function.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: create,\n      alt: \"create_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), \"The first instruction seems to be saving a hex number into\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), \" which will act as a memory address, then it proceeds to move 8 bytes into memory address \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x2400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 52\n    }, this), \" \", \"to \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x2407\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }, this), \". it's probably safe to assume that the program will compare this sequence of bytes to the password given by the user later on, but let's follow along for now.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: check,\n      alt: \"check_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), \"The first instruction in \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"check_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 32\n    }, this), \" sets the value of \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r14\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }, this), \" to 0.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MCNO;\nexport default MCNO;\n\nvar _c;\n\n$RefreshReg$(_c, \"MCNO\");","map":{"version":3,"sources":["/home/kali/Development/Projects/terminal/src/components/Writeups/MCNO.js"],"names":["main","create","check","MCNO"],"mappings":"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","sourcesContent":["import main from \"./img/NOmain.png\";\nimport create from \"./img/NOcreate.png\";\nimport check from \"./img/NOcheck.png\";\n\nconst MCNO = () => {\n  return (\n    <div>\n      <br />\n      <h1>Microcorruption: New Orleans</h1>\n      2021-02-28\n      <br />\n      <br />\n      This will be the first of a series of posts where I detail my answers to\n      various{\" \"}\n      <a href=\"https://microcorruption.com/\" target=\"__blank\">\n        microcorruption\n      </a>{\" \"}\n      ctf challenges. The objective of these challenges is to unlock a device by\n      reverse-engineering its code and exploiting its vulnerabilities. With that\n      out of the way, let's get hacking!\n      <br />\n      <br />\n      The first thing I did was set up a break point at{\" \"}\n      <span id=\"code\">main</span>, since that's the entry point for our program.\n      <br />\n      <br />\n      <img src={main} alt=\"main\" />\n      <br />\n      <br />\n      This code might seem intimidating if you aren't familiar with assembly,\n      but it's actually quite simple. First, it calls a{\" \"}\n      <span id=\"code\">create_password</span> function, then it prints a string\n      with the <span id=\"code\">puts</span> function. Next, it gets a password\n      from the user and checks if it's correct. Depending on the content of{\" \"}\n      <span id=\"code\">r15</span> after <span id=\"code\">check_password</span> is\n      executed, the door will either unlock or remain locked.\n      <br />\n      <br />\n      First of all, Let's take a closer look at{\" \"}\n      <span id=\"code\">create_password</span>, since it seems like a promising\n      function.\n      <br />\n      <br />\n      <img src={create} alt=\"create_password\" />\n      <br />\n      <br />\n      The first instruction seems to be saving a hex number into{\" \"}\n      <span id=\"code\">r15</span> which will act as a memory address, then it\n      proceeds to move 8 bytes into memory address <span id=\"code\">0x2400</span>{\" \"}\n      to <span id=\"code\">0x2407</span>. it's probably safe to assume that the\n      program will compare this sequence of bytes to the password given by the\n      user later on, but let's follow along for now.\n      <br />\n      <br />\n      <img src={check} alt=\"check_password\" />\n      <br />\n      <br />\n      The first instruction in <span id=\"code\">check_password</span> sets the\n      value of <span id=\"code\">r14</span> to 0.\n    </div>\n  );\n};\n\nexport default MCNO;\n"]},"metadata":{},"sourceType":"module"}