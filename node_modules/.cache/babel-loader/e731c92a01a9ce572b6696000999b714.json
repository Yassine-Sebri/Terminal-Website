{"ast":null,"code":"import main from\"./img/NOmain.png\";import create from\"./img/NOcreate.png\";import check from\"./img/NOcheck.png\";import memory from\"./img/NOmemory.png\";import solved from\"./img/NOsolved.png\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MCNO=function MCNO(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"h1\",{children:\"Microcorruption: New Orleans\"}),\"2021-02-28\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"This will be the first of a series of posts where I detail my answers to various\",\" \",/*#__PURE__*/_jsx(\"a\",{href:\"https://microcorruption.com/\",target:\"__blank\",children:\"microcorruption\"}),\" \",\"ctf challenges. The objective of these challenges is to unlock a device by reverse-engineering its code and exploiting its vulnerabilities. With that out of the way, let's get hacking!\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"The first thing I did was set up a break point at\",\" \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"main\"}),\", since that's the entry point for our program.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:main,alt:\"main\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"This code might seem intimidating if you aren't familiar with assembly, but it's actually quite simple. First, it calls a\",\" \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"create_password\"}),\" function, then it prints a string with the \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"puts\"}),\" function. Next, it gets a password from the user and checks if it's correct. Depending on the content of\",\" \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"r15\"}),\" after \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"check_password\"}),\" is executed, the door will either unlock or remain locked.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"First of all, Let's take a closer look at\",\" \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"create_password\"}),\", since it seems like a promising function.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:create,alt:\"create_password\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"The first instruction seems to be saving a hex number into\",\" \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"r15\"}),\" which will act as a memory address, then it proceeds to move 8 bytes into memory address \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"0x2400\"}),\" \",\"to \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"0x2407\"}),\". it's probably safe to assume that the program will compare this sequence of bytes to the password given by the user later on, but let's follow along for now.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:check,alt:\"check_password\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"A quick read through \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"check_password\"}),\" shows us that it follows the structure of a while loop, where\",\" \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"r14\"}),\" acts as a counter starting from 0 till it reaches the value 8. \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"r14\"}),\" will increment if the bytes at address \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"0x2400\"}),\" previously set by the\",\" \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"create_password\"}),\" function match the user input stored at the memory address in r13. if \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"r14\"}),\" reaches 8, \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"r15\"}),\" receives the value 1 which will then unlock the door.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"Knowing that, we just have to enter the string stored\",\" \",/*#__PURE__*/_jsx(\"span\",{id:\"code\",children:\"0x2400\"}),\" to solve the challenge. We can copy the string using the Live Memory Dump window.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:memory,alt:\"Live Memory Dump\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"Et voila! It was a pretty straightforward solution meant to familiarize newcomers with reading and understanding assembly code.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:solved,alt:\"Challenge solved\"})]});};export default MCNO;","map":{"version":3,"sources":["/home/kali/Development/Projects/terminal/src/components/Writeups/MCNO.js"],"names":["main","create","check","memory","solved","MCNO"],"mappings":"AAAA,MAAOA,CAAAA,IAAP,KAAiB,kBAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,mBAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,C,wFAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjB,mBACE,oCACE,aADF,cAEE,oDAFF,2BAIE,aAJF,cAKE,aALF,oFAOU,GAPV,cAQE,UAAG,IAAI,CAAC,8BAAR,CAAuC,MAAM,CAAC,SAA9C,6BARF,CAUO,GAVP,yMAcE,aAdF,cAeE,aAfF,qDAgBoD,GAhBpD,cAiBE,aAAM,EAAE,CAAC,MAAT,kBAjBF,gEAkBE,aAlBF,cAmBE,aAnBF,cAoBE,YAAK,GAAG,CAAEL,IAAV,CAAgB,GAAG,CAAC,MAApB,EApBF,cAqBE,aArBF,cAsBE,aAtBF,6HAwBoD,GAxBpD,cAyBE,aAAM,EAAE,CAAC,MAAT,6BAzBF,6DA0BW,aAAM,EAAE,CAAC,MAAT,kBA1BX,6GA2BwE,GA3BxE,cA4BE,aAAM,EAAE,CAAC,MAAT,iBA5BF,wBA4BmC,aAAM,EAAE,CAAC,MAAT,4BA5BnC,4EA8BE,aA9BF,cA+BE,aA/BF,6CAgC4C,GAhC5C,cAiCE,aAAM,EAAE,CAAC,MAAT,6BAjCF,4DAmCE,aAnCF,cAoCE,aApCF,cAqCE,YAAK,GAAG,CAAEC,MAAV,CAAkB,GAAG,CAAC,iBAAtB,EArCF,cAsCE,aAtCF,cAuCE,aAvCF,8DAwC6D,GAxC7D,cAyCE,aAAM,EAAE,CAAC,MAAT,iBAzCF,2GA0C+C,aAAM,EAAE,CAAC,MAAT,oBA1C/C,CA0C6E,GA1C7E,oBA2CK,aAAM,EAAE,CAAC,MAAT,oBA3CL,gLA8CE,aA9CF,cA+CE,aA/CF,cAgDE,YAAK,GAAG,CAAEC,KAAV,CAAiB,GAAG,CAAC,gBAArB,EAhDF,cAiDE,aAjDF,cAkDE,aAlDF,sCAkD6B,aAAM,EAAE,CAAC,MAAT,4BAlD7B,kEAmDuD,GAnDvD,cAoDE,aAAM,EAAE,CAAC,MAAT,iBApDF,iFAqDuB,aAAM,EAAE,CAAC,MAAT,iBArDvB,yDAsDmB,aAAM,EAAE,CAAC,MAAT,oBAtDnB,0BAsDuE,GAtDvE,cAuDE,aAAM,EAAE,CAAC,MAAT,6BAvDF,wFAwD0C,aAAM,EAAE,CAAC,MAAT,iBAxD1C,6BAyDK,aAAM,EAAE,CAAC,MAAT,iBAzDL,uEA2DE,aA3DF,cA4DE,aA5DF,yDA6DwD,GA7DxD,cA8DE,aAAM,EAAE,CAAC,MAAT,oBA9DF,mGAgEE,aAhEF,cAiEE,aAjEF,cAkEE,YAAK,GAAG,CAAEC,MAAV,CAAkB,GAAG,CAAC,kBAAtB,EAlEF,cAmEE,aAnEF,cAoEE,aApEF,gJAuEE,aAvEF,cAwEE,aAxEF,cAyEE,YAAK,GAAG,CAAEC,MAAV,CAAkB,GAAG,CAAC,kBAAtB,EAzEF,GADF,CA6ED,CA9ED,CAgFA,cAAeC,CAAAA,IAAf","sourcesContent":["import main from \"./img/NOmain.png\";\nimport create from \"./img/NOcreate.png\";\nimport check from \"./img/NOcheck.png\";\nimport memory from \"./img/NOmemory.png\";\nimport solved from \"./img/NOsolved.png\";\n\nconst MCNO = () => {\n  return (\n    <div>\n      <br />\n      <h1>Microcorruption: New Orleans</h1>\n      2021-02-28\n      <br />\n      <br />\n      This will be the first of a series of posts where I detail my answers to\n      various{\" \"}\n      <a href=\"https://microcorruption.com/\" target=\"__blank\">\n        microcorruption\n      </a>{\" \"}\n      ctf challenges. The objective of these challenges is to unlock a device by\n      reverse-engineering its code and exploiting its vulnerabilities. With that\n      out of the way, let's get hacking!\n      <br />\n      <br />\n      The first thing I did was set up a break point at{\" \"}\n      <span id=\"code\">main</span>, since that's the entry point for our program.\n      <br />\n      <br />\n      <img src={main} alt=\"main\" />\n      <br />\n      <br />\n      This code might seem intimidating if you aren't familiar with assembly,\n      but it's actually quite simple. First, it calls a{\" \"}\n      <span id=\"code\">create_password</span> function, then it prints a string\n      with the <span id=\"code\">puts</span> function. Next, it gets a password\n      from the user and checks if it's correct. Depending on the content of{\" \"}\n      <span id=\"code\">r15</span> after <span id=\"code\">check_password</span> is\n      executed, the door will either unlock or remain locked.\n      <br />\n      <br />\n      First of all, Let's take a closer look at{\" \"}\n      <span id=\"code\">create_password</span>, since it seems like a promising\n      function.\n      <br />\n      <br />\n      <img src={create} alt=\"create_password\" />\n      <br />\n      <br />\n      The first instruction seems to be saving a hex number into{\" \"}\n      <span id=\"code\">r15</span> which will act as a memory address, then it\n      proceeds to move 8 bytes into memory address <span id=\"code\">0x2400</span>{\" \"}\n      to <span id=\"code\">0x2407</span>. it's probably safe to assume that the\n      program will compare this sequence of bytes to the password given by the\n      user later on, but let's follow along for now.\n      <br />\n      <br />\n      <img src={check} alt=\"check_password\" />\n      <br />\n      <br />A quick read through <span id=\"code\">check_password</span> shows us\n      that it follows the structure of a while loop, where{\" \"}\n      <span id=\"code\">r14</span> acts as a counter starting from 0 till it\n      reaches the value 8. <span id=\"code\">r14</span> will increment if the\n      bytes at address <span id=\"code\">0x2400</span> previously set by the{\" \"}\n      <span id=\"code\">create_password</span> function match the user input\n      stored at the memory address in r13. if <span id=\"code\">r14</span> reaches\n      8, <span id=\"code\">r15</span> receives the value 1 which will then unlock\n      the door.\n      <br />\n      <br />\n      Knowing that, we just have to enter the string stored{\" \"}\n      <span id=\"code\">0x2400</span> to solve the challenge. We can copy the\n      string using the Live Memory Dump window.\n      <br />\n      <br />\n      <img src={memory} alt=\"Live Memory Dump\" />\n      <br />\n      <br />\n      Et voila! It was a pretty straightforward solution meant to familiarize\n      newcomers with reading and understanding assembly code.\n      <br />\n      <br />\n      <img src={solved} alt=\"Challenge solved\" />\n    </div>\n  );\n};\n\nexport default MCNO;\n"]},"metadata":{},"sourceType":"module"}