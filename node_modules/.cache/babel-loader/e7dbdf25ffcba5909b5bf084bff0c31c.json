{"ast":null,"code":"var _jsxFileName = \"/home/kali/Development/Projects/terminal/src/components/Writeups/MCS.js\";\nimport main from \"./img/Smain.png\";\nimport check from \"./img/Scheck.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MCS = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Microcorruption: Sydney\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), \"2021-03-01\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), \"As usual, let's start by taking a look at the \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 53\n    }, this), \" \", \"function.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: main,\n      alt: \"main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), \"Unlike last time, there doesn't seem to be a\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"create_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), \" function, but the flow is pretty similar. First it gets a password from the user then it executes the\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"check_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), \" function, and depending on the value of \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }, this), \" after the execution it decides whether to open the lock or not. It seems that the\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"check_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), \" function is key in this whole thing, so let's check it out.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: check,\n      alt: \"check_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), \"The \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"check_password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this), \" performs a series of comparisons between the values stored at an offset from memory address\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), \" and a set of hexadecimal values. If the values match then \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 18\n    }, this), \" would receive the value 1, fulfilling the condition for unlocking the door. The memory values stored at \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 10\n    }, this), \" represent the password entered by the user, so all we have to do to solve the challenge is submit the hexadecimal values\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MCS;\nexport default MCS;\n\nvar _c;\n\n$RefreshReg$(_c, \"MCS\");","map":{"version":3,"sources":["/home/kali/Development/Projects/terminal/src/components/Writeups/MCS.js"],"names":["main","check","MCS"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,iBAAjB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,6BAIE;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA;AAAA;AAAA;AAAA,YALF,iEAMgD;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANhD,EAQU,GARV,4BAUE;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAK,MAAA,GAAG,EAAEF,IAAV;AAAgB,MAAA,GAAG,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,YAZF,eAaE;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE;AAAA;AAAA;AAAA;AAAA,YAdF,kDAe+C,GAf/C,eAgBE;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF,4GAiBuE,GAjBvE,eAkBE;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF,4DAmBK;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBL,wFAoB0C,GApB1C,eAqBE;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF,+EAuBE;AAAA;AAAA;AAAA;AAAA,YAvBF,eAwBE;AAAA;AAAA;AAAA;AAAA,YAxBF,eAyBE;AAAK,MAAA,GAAG,EAAEC,KAAV;AAAiB,MAAA,GAAG,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,YAzBF,eA0BE;AAAA;AAAA;AAAA;AAAA,YA1BF,eA2BE;AAAA;AAAA;AAAA;AAAA,YA3BF,uBA4BM;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BN,kGA6B6D,GA7B7D,eA8BE;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA9BF,8EA+Ba;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA/Bb,4HAiCK;AAAM,MAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjCL;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CAxCD;;KAAMC,G;AA0CN,eAAeA,GAAf","sourcesContent":["import main from \"./img/Smain.png\";\nimport check from \"./img/Scheck.png\";\n\nconst MCS = () => {\n  return (\n    <div>\n      <br />\n      <h1>Microcorruption: Sydney</h1>\n      2021-03-01\n      <br />\n      <br />\n      As usual, let's start by taking a look at the <span id=\"code\">\n        main\n      </span>{\" \"}\n      function.\n      <br />\n      <br />\n      <img src={main} alt=\"main\" />\n      <br />\n      <br />\n      Unlike last time, there doesn't seem to be a{\" \"}\n      <span id=\"code\">create_password</span> function, but the flow is pretty\n      similar. First it gets a password from the user then it executes the{\" \"}\n      <span id=\"code\">check_password</span> function, and depending on the value\n      of <span id=\"code\">r15</span> after the execution it decides whether to\n      open the lock or not. It seems that the{\" \"}\n      <span id=\"code\">check_password</span> function is key in this whole thing,\n      so let's check it out.\n      <br />\n      <br />\n      <img src={check} alt=\"check_password\" />\n      <br />\n      <br />\n      The <span id=\"code\">check_password</span> performs a series of comparisons\n      between the values stored at an offset from memory address{\" \"}\n      <span id=\"code\">r15</span> and a set of hexadecimal values. If the values\n      match then <span id=\"code\">r15</span> would receive the value 1,\n      fulfilling the condition for unlocking the door. The memory values stored\n      at <span id=\"code\">r15</span> represent the password entered by the user,\n      so all we have to do to solve the challenge is submit the hexadecimal\n      values\n    </div>\n  );\n};\n\nexport default MCS;\n"]},"metadata":{},"sourceType":"module"}