{"ast":null,"code":"var _jsxFileName = \"/home/kali/Development/Projects/terminal/src/components/Writeups/MCH.js\";\nimport main from \"./img/Hmain.png\";\nimport login from \"./img/Hlogin.png\";\nimport test from \"./img/Htest.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MCH = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Microcorruption: Hanoi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), \"2021-03-02\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), \"This challenge is different from the previous ones because solving it doesn't involve finding the \\\"correct\\\" password. This might seem confusing but it will become clear as we try to solve the challenge.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), \"As usual, let us start by checking the \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 46\n    }, this), \" \", \"function.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: main,\n      alt: \"main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), \"It doesn't seem to have much going on. It just calls a\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), \" function and sets \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 54\n    }, this), \" \", \"to 0 when it is done. It seems like we have to check\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), \" in order to understand what exactly the program is doing.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: login,\n      alt: \"login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), \"The first part is pretty standard. It asks the user for a password and then stores it at memory address \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x2400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 40\n    }, this), \". What's interesting, however, is that it asks for a password between 8 and 16 characters. Keep that in mind because it will be important. Next, it calls a \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"test_password_valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), \" function and depending on the value of \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this), \" after it's executed it decides to skip instruction \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x445a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this), \" which sets memory address\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x2410\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \" to \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x17\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 40\n    }, this), \" or execute it.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), \"Instruction \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x455a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }, this), \" compares the value at address\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x2410\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), \" with \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x28\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 42\n    }, this), \", and depending on the result the door will either unlock or remain closed. In other words, our objective is to somehow change the value of\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x2410\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), \" to \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x28\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 40\n    }, this), \". Let's check\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"test_password_valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), \" for any clues that might help.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: test,\n      alt: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), \"This function seems to do a lot less than I thought. The most interseting parts for to me were instructions \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x445c\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 41\n    }, this), \" and\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x4472\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), \". It's just a very roundabout way of giving\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"r15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), \" the value 0 and I'm not sure if it was just there to confuse players or there is more to it. Either way, after fiddling with it for a while and being unable to figure out what I'm supposed to make out of this function I decided to take a step back and focus on what I need to do.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), \"To open the door I just need to find a way to set the value of\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x2410\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), \" to \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x28\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 40\n    }, this), \". I know that the password I type will be stored at \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x2400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 45\n    }, this), \" so I can modify the values from there to \", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"code\",\n      children: \"0x240F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 43\n    }, this), \" since the password should be 16 characters long.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MCH;\nexport default MCH;\n\nvar _c;\n\n$RefreshReg$(_c, \"MCH\");","map":{"version":3,"sources":["/home/kali/Development/Projects/terminal/src/components/Writeups/MCH.js"],"names":["main","login","test","MCH"],"mappings":"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","sourcesContent":["import main from \"./img/Hmain.png\";\nimport login from \"./img/Hlogin.png\";\nimport test from \"./img/Htest.png\";\n\nconst MCH = () => {\n  return (\n    <div>\n      <br />\n      <h1>Microcorruption: Hanoi</h1>\n      2021-03-02\n      <br />\n      <br />\n      This challenge is different from the previous ones because solving it\n      doesn't involve finding the \"correct\" password. This might seem confusing\n      but it will become clear as we try to solve the challenge.\n      <br />\n      <br />\n      As usual, let us start by checking the <span id=\"code\">main</span>{\" \"}\n      function.\n      <br />\n      <br />\n      <img src={main} alt=\"main\" />\n      <br />\n      <br />\n      It doesn't seem to have much going on. It just calls a{\" \"}\n      <span id=\"code\">login</span> function and sets <span id=\"code\">r15</span>{\" \"}\n      to 0 when it is done. It seems like we have to check{\" \"}\n      <span id=\"code\">login</span> in order to understand what exactly the\n      program is doing.\n      <br />\n      <br />\n      <img src={login} alt=\"login\" />\n      <br />\n      <br />\n      The first part is pretty standard. It asks the user for a password and\n      then stores it at memory address <span id=\"code\">0x2400</span>. What's\n      interesting, however, is that it asks for a password between 8 and 16\n      characters. Keep that in mind because it will be important. Next, it calls\n      a <span id=\"code\">test_password_valid</span> function and depending on the\n      value of <span id=\"code\">r15</span> after it's executed it decides to skip\n      instruction <span id=\"code\">0x445a</span> which sets memory address{\" \"}\n      <span id=\"code\">0x2410</span> to <span id=\"code\">0x17</span> or execute\n      it.\n      <br />\n      <br />\n      Instruction <span id=\"code\">0x455a</span> compares the value at address{\" \"}\n      <span id=\"code\">0x2410</span> with <span id=\"code\">0x28</span>, and\n      depending on the result the door will either unlock or remain closed. In\n      other words, our objective is to somehow change the value of{\" \"}\n      <span id=\"code\">0x2410</span> to <span id=\"code\">0x28</span>. Let's check{\" \"}\n      <span id=\"code\">test_password_valid</span> for any clues that might help.\n      <br />\n      <br />\n      <img src={test} alt=\"test\" />\n      <br />\n      <br />\n      This function seems to do a lot less than I thought. The most interseting\n      parts for to me were instructions <span id=\"code\">0x445c</span> and{\" \"}\n      <span id=\"code\">0x4472</span>. It's just a very roundabout way of giving{\" \"}\n      <span id=\"code\">r15</span> the value 0 and I'm not sure if it was just\n      there to confuse players or there is more to it. Either way, after\n      fiddling with it for a while and being unable to figure out what I'm\n      supposed to make out of this function I decided to take a step back and\n      focus on what I need to do.\n      <br />\n      <br />\n      To open the door I just need to find a way to set the value of{\" \"}\n      <span id=\"code\">0x2410</span> to <span id=\"code\">0x28</span>. I know that\n      the password I type will be stored at <span id=\"code\">0x2400</span> so I\n      can modify the values from there to <span id=\"code\">0x240F</span> since\n      the password should be 16 characters long.\n    </div>\n  );\n};\n\nexport default MCH;\n"]},"metadata":{},"sourceType":"module"}